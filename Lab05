"""
- CS2911 - 022
- Fall 2018
- Lab 5
- Names:
  - Joe Casper
  - Lauren Lee

A simple HTTP client
"""

# import the "socket" module -- not using "from socket import *" in order to selectively use items with "socket." prefix
import socket

# import the "regular expressions" module
import re


def main():
    """
    Tests the client on a variety of resources
    """

    # These resource request should result in "Content-Length" data transfer
    get_http_resource('http://msoe.us/taylor/images/taylor.jpg', 'taylor.jpg')
    # this resource request should result in "chunked" data transfer
    get_http_resource('http://msoe.us/taylor/', 'index.html')

    # If you find fun examples of chunked or Content-Length pages, please share them with us!


def get_http_resource(url, file_name):
    """
    Get an HTTP resource from a server
           Parse the URL and call function to actually make the request.

    :param url: full URL of the resource to get
    :param file_name: name of file in which to store the retrieved resource

    (do not modify this function)
    """

    # Parse the URL into its component parts using a regular expression.
    url_match = re.search('http://([^/:]*)(:\d*)?(/.*)', url)
    url_match_groups = url_match.groups() if url_match else []
    #    print 'url_match_groups=',url_match_groups
    if len(url_match_groups) == 3:
        host_name = url_match_groups[0]
        host_port = int(url_match_groups[1][1:]) if url_match_groups[1] else 80
        host_resource = url_match_groups[2]
        print('host name = {0}, port = {1}, resource = {2}'.format(host_name, host_port, host_resource))
        status_string = make_http_request(host_name.encode(), host_port, host_resource.encode(), file_name)
        print('get_http_resource: URL="{0}", status="{1}"'.format(url, status_string))
    else:
        print('get_http_resource: URL parse failed, request not sent')


def make_http_request(host, port, resource, file_name):
    """
    Get an HTTP resource from a server

    :param bytes host: the ASCII domain name or IP address of the server machine (i.e., host) to connect to
    :param int port: port number to connect to on server host
    :param bytes resource: the ASCII path/name of resource to get. This is everything in the URL after the domain name,
           including the first /.
    :param file_name: string (str) containing name of file in which to store the retrieved resource
    :return: the status code
    :rtype: int
    :author: Lauren Lee
    """

    data_socket = get_connection(host, port)

    request = b'GET ' + resource + b' HTTP/1.1\r\n' + b'Host: ' + host + b'\r\n\r\n'
    data_socket.sendall(request)

    # read the headers to find the transfer type
    data_transfer = read_all_headers(data_socket)
    # Read the body
    message = receive(data_socket, data_transfer)
    # Saves the file
    save_to_file(file_name, message)
    print("file Saved")


def get_connection(host, port):
    """
    :param host is the domain of the site
    :param: port is the physical port that the computer is listening
    :return data_socket of the where the socket is
    :author Lauren Lee
    """
    data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    data_socket.connect((host, port))
    return data_socket


def read_all_headers(data_socket):
    """
    # Reads all http headers to find the transfer encoding type
    :param data_socket: iterator that next_byte uses
    :return: transfer type
    """
    transfer_type = b''

    # Holds a space so that the while loop initiates
    name_of_header = b' '

    # Run while the name field doesn't return a blank object
    while name_of_header != b'':
        name_of_header = get_name(data_socket)

        # We only care about the header if it tells us how the data is transferred,
        # so check if it's one of those before saving the value
        if name_of_header == b'Content-Length' or name_of_header == b'Transfer-Encoding':
            transfer_type = get_value(data_socket)

    # transfer_type either holds 'chunked' or an ASCII digit. This is handled when the body is read.
    return transfer_type


def get_name(data_socket):
    name = b''
    byte = b''

    # Run loop while the byte doesn't return a ':'
    while byte != b':':
        byte = next_byte(data_socket)

        # Check if the byte is a \r. If it is, this is a blank line, and the headers are over
        if byte == b'\r':
            # Advance past the \n as it is not needed
            next_byte(data_socket)
            # Returns a blank bytes object, which signals that the headers are over
            return name

        # If the byte is not a ':', append it to the name
        if byte != b':':
            name += byte

    return name


def get_value(data_socket):
    """
    Gets the 'value' section of an http header
    :param data_socket: iterator that next byte uses
    :return: the 'value' section
    """
    bytes = b''
    values = b''

    # Sjip the space that is after the colon
    next_byte(data_socket)

    # run loop while the byte is not a \r
    while bytes != b'\r':
        bytes = next_byte(data_socket)

        # If the byte is a \r, the value section is over
        if bytes == b'\r':
            # Advance past the /n, as it is unneeded
            next_byte(data_socket)

            # Return the data collected
            return values

        # append the next byte to values
        values += bytes


def receive(data_socket, data_transfer):
    """
    Reads the body of an http body and returns it in a string
    :param: data_socket: the iterator next_byte uses
    :param: data_transfer_type: will be "chunked" or "content-length" depending on the data transfer
    :return: a str containing the data from the http body
    :author: Joe Casper
    """

    # if the type is chunked, read it with the chunked methods
    if data_transfer == b'chunked':
        message = read_chunked_content(data_socket)

    else:
        # If the type is content length, data_transfer = the length of the content block in bytes
        message = read_content_length(data_socket, data_transfer)

    return message


def read_content_length(data_socket, message_length):
    """
    Reads the http body when it is encoded as content length, returns the value as a str
    :param data_socket: iterator that next_byte uses
    :param message_length: The length, in bytes, of the message
    :author: Joe Casper
    """
    # also needed to be byte 
    message = b''

    # message_length starts as a bytes object, so convert it to an int
    int_length = convert_ascii_to_int(message_length)

    # For each byte in the body, read in a byte
    for i in range(0, int_length):
        message += next_byte(data_socket)

    return message


def read_chunked_content(data_socket):
    """
    Reads the body if the data transfer type is chunked
    :param data_socket: the iterator next_byte uses
    :return: the body of the message, stored in a str
    :author: Joe Casper
    """
    # need to be byte because was originally a string
    # if we are going to do string or bytes: need to be consistent 
    message = b''

    # set a default length so the while loop works. Length is changed as the method runs.
    length = -1

    # run this loop while there are more chunks to read
    while length != 0:
        # read the length portion of the chunk, get the ascii value of it
        ascii_length = get_length_of_chunk(data_socket)

        if ascii_length != b'':
            # convert the ascii characters to an int value
            length = convert_ascii_to_int(ascii_length)

            # reads the chunk of data, returns it as a str, and appends it to message
            message += read_one_chunk(data_socket, length)

    return message


def get_length_of_chunk(data_socket):
    """
    Reads the length section of a chunk and returns the ascii value
    :param data_socket: iterator that next_byte uses
    :return: the length as a bytes object
    :author: Joe Casper
    """
    byte_read = b''
    temp_byte = b''

    # read the bytes until a carriage return is found
    while temp_byte != b'\r':
        # store the next available byte in a temporary variable
        temp_byte = next_byte(data_socket)

        # add the byte if it is not a carriage return
        if temp_byte != b'\r':
            byte_read += temp_byte

    # advance the data_socket one character so that it is past the newline character
    next_byte(data_socket)

    # return the characters in the length section of this chunk
    return byte_read


def convert_ascii_to_int(bytes_obj):
    """
    Takes in an ascii value and converts it to an int object
    :param bytes_obj: bytes object containing ascii characters
    :return: the integer value of the byes object
    :author: Joe Casper
    """
    # bytes to str
    string_obj = bytes_obj.decode("ASCII")

    # str to int
    return int(string_obj, 16)


def read_one_chunk(data_socket, length):
    """
    Reads a chunk of the body, returns a str of the chunk
    :param data_socket: iterator that next_byte uses
    :param length: The number of bytes in the chunk
    :return: a str containing the data from the chunk
    :author: Joe Casper
    """
    # create a bytes object to hold the message
    message = b''

    # iterate through the loop for as long as the body is
    for x in range(0, length):
        # Read the next byte, append to message
        message += next_byte(data_socket)

    return message


def next_byte(data_socket):
    """
    Read the next byte from the socket data_socket.

    Read the next byte from the sender, received over the network.
    If the byte has not yet arrived, this method blocks (waits)
      until the byte arrives.
    If the sender is done sending and is waiting for your response, this method blocks indefinitely.

    :param data_socket: The socket to read from. The data_socket argument should be an open tcp
                        data connection (either a client socket or a server data socket), not a tcp
                        server's listening socket.
    :return: the next byte, as a bytes object with a single byte in it
    :author: Joe Casper
    """
    return data_socket.recv(1)


def save_to_file(file_name, message):
    """
    Saves the newly decoded message in a file
    :param file_name: the name that will be assigned to this file
    :param message: the http body stored in an str
    :author: Joe Casper
    """
    print(type(message))
    print(file_name)
    reader = open(file_name, "wb")
    reader.write(message)
    reader.close()


main()
